#!/usr/bin/env ruby

# = RuiFlex
#
# RuiFlex is a front-end for using Flex. RuiFlex makes flex usage a bit
# simpler.
#
# RuiFlex takes in a file of Token descriptions and options. The tokens
# are described with regexp, type (class), and addition tag info. Most
# Tokens don't need tag info.
#
# RuiFlex generates Flex-file and a companing C-header file. Each Token
# will have a unique number and cpp define to be used within
# C-code. Also a function for accessing Token desciption and ID info
# is created.


require 'como'
include Como

Spec.command( 'ruiflex', 'Tero Isannainen', '2015, 2016',
    [
        [ :single,    'file',      '-f', "RuiFlex file (suffix: rb)." ],
        [ :switch,    'transform', '-t', "Transform output (i.e. run flex)." ],
        [ :exclusive, 'example',   '-e', "Show example RuiFlex file." ],
        [ :exclusive, 'doc',       '-d', "Show token info." ],
    ] )


# Options for Flex. To be used in RuiFlex file.
class FlexOpt

    Opts = {
        # Flex handles linenumber counting.
        :lineno => false,
        # Reentrant lexer.
        :reentrant => false,

        # Custom options.
        :flexopt => [],

        # Addition header code before lexical defs (*.l).
        :l_header => nil,
        # Addition footer code after everything else (*.l).
        :l_footer => nil,

        # Addition header code before C header defs (*.h).
        :h_header => nil,
        # Addition footer code after everything else (*.h).
        :h_footer => nil,
    }

    # Set option value.
    def FlexOpt.set( opt, val )
        Opts[ opt ] = val
    end

    # Add to options value list.
    def FlexOpt.add( opt, val )
        Opts[ opt ].push val
    end

    # Get option value(s).
    def FlexOpt.get( opt )
        Opts[ opt ]
    end
end



# Flex token info container. Class variables contain all tokens, and
# separate instances exist for individual tokens.
#
# @example:
#   Token.new( %q{width}, :keyword )
#
class Token

    # ------------------------------------------------------------
    # Class defs:

    # Token types and related info.
    TOKEN_TYPES = {
        :comment => {
            :token => -> s { "TOK_COMMENT" },
            :desc => "comment",
            :info => "Comment",
        },

        :const => {
            :token => -> s { "TOK_CONST" },
            :desc => "constant",
            :info => "Numeric constant."
        },

        :ident => {
            :token => -> s { "TOK_ID" },
            :desc => "identifier",
            :info => "Name of variable."
        },

        :funccall => {
            :token => -> s { "TOK_FUNC_ID" },
            :desc => "function call",
            :info => "Name of function."
        },

        :string => {
            :token => -> s { "TOK_STR" },
            :desc => "string literal",
            :info => "String constant."
        },

        :keyword => {
            :token => -> s { if s.tag; "TOK_KEY_#{s.tag}" else "TOK_KEY_#{s.re.upcase}" end },
            :desc => "keyword",
            :info => "Keyword token."
        },

        :longop => {
            :token => -> s { "TOK_#{s.tag}" },
            :desc => "operator",
            :info => "Operator with specific name."
        },

        :liteop => {
            :token => -> s { s.tag },
            :desc => "operator",
            :info => "Literal operator (token value is char, < 128)."
        },

        :punct => {
            :token => -> s { "TOK_#{s.tag}" },
            :desc => "punctuation",
            :info => "Semantic separator of tokens."
        },

        :space => {
            :token => -> s { "TOK_SPACE" },
            :desc => "space character",
            :info => "Formatting separator of tokens."
        },

        :custom => {
            :token => -> s { "TOK_#{s.tag}" },
            :desc => "custom token",
            :info => "Customized token."
        },

        :unknown => {
            :token => -> s { "TOK_UNKNOWN" },
            :desc => "unknown character",
            :info => "Unrecognized character (possible error)."
        },

        :error => {
            :token => -> s { "TOK_ERROR" },
            :desc => "input error",
            :info => "Erroneous character(s)."
        },

    }


    # Start C-defines at value 300.
    ID_START = 300

    # Class variable to store all Tokens.
    @@tokens = []

    # Current token id value.
    @@token_id = ID_START

    # Collection of all ID of defined tokens.
    @@token_ids = {}



    # ------------------------------------------------------------
    # Instance defs:

    # Regular expression for recognizing the token string from input.
    attr_accessor :re

    # Type (class) of the Token: :keyword, :longop etc (see: #idstr).
    attr_accessor :type

    # Complementary tag for operator and other puncts.
    attr_accessor :tag

    # Id number for Token.
    attr_reader :id

    # Ignore from output flag.
    attr_reader :ignore

    # Token action.
    attr_reader :action



    # Create a new Token. Register it to the complete list of all
    # existing Tokens.
    def initialize( re, type, tag = nil, &blk )
        @@tokens.push self

        @re = re
        @type = type
        @tag = tag

        @ignore = false
        @action = nil

        @id = nil
        getid

        # Optional user settings.
        instance_exec( &blk ) if blk
    end


    # Generate new globally valid token id number.
    def Token.getid
        id = @@token_id
        @@token_id += 1
        id
    end


    # Token is ignored, i.e. not send forward.
    def ignore
        @ignore = true
        self
    end


    # Token action to replace default.
    def action( act )
        @action = act
        self
    end


    # Generate id related information for Token.
    def getid

        case @type

        when :keyword, :longop, :liteop, :punct, :custom;
            # These types all get unique IDs.
            @id = Token.getid
            @@token_ids[ idstr ] = [ @id, descstr ]

        else

            # These types are collated (from regexp to type).
            unless @@token_ids[ idstr ]
                @id = Token.getid
                @@token_ids[ idstr ] = [ @id, descstr ]
            end

        end
    end


    # Return C-define for Token.
    def idstr
        t = TOKEN_TYPES[ @type ]
        if t
            return t[:token].call( self )
        else
            raise RuntimeError
        end
    end


    # Return descriptive info about token.
    def descstr
        t = TOKEN_TYPES[ @type ]
        if t
            return t[:desc]
        else
            raise RuntimeError
        end
    end


    # Return ID index.
    def ididx
        TOKEN_TYPES.keys.index( @type )
    end


    # Flex-file description for Token.
    def display( fh )
        case @type
        when :keyword; rs = "\"#{@re}\""
        when :unknown; rs = '.'
        else rs = @re
        end

        if @ignore
            fh.puts( format "%-30s { /* Ignored */ }", rs )
        elsif @action
            fh.puts( format "%-30s { #{@action} }", rs )
        else
            fh.puts( format "%-30s { return #{idstr}; }", rs )
        end
    end

    # List of all defined Tokens.
    def Token.tokens
        @@tokens
    end

    # List of all token IDs.
    def Token.token_ids
        @@token_ids
    end

end



# ------------------------------------------------------------
# Show RuiFlex example file:

if Opt['example'].given
    puts %q[
FlexOpt.set( :lineno, true )
FlexOpt.set( :reentrant, false )

Token.new( %q{#[^\n]*},              :comment ).ignore
Token.new( %q{0[xX]{H}+},            :const )

Token.new( %q{func},                 :keyword )
Token.new( %q{module},               :keyword )
Token.new( %q{port},                 :keyword )

Token.new( %q{{L}({L}|{D})*},        :ident )

Token.new( %q{L?\"(\\\\.|[^\\\\"])*\"},  :string ) # "

Token.new( %q{"+"},                  :longop, "OP_PLUS" )
Token.new( %q{"-"},                  :longop, "OP_MINUS" )
Token.new( %q{"*"},                  :longop, "OP_MULT" )
Token.new( %q{"/"},                  :longop, "OP_DIV" )

Token.new( %q{":"},                  :punct, "COLON" )
Token.new( %q{"\\\\."},                :punct, "DOT" )

Token.new( %q{[ \t\v\n\f]},          :space ).ignore

Token.new( nil,                      :unknown )
    ]

    # %q[] Color fix for ruby mode.

    exit( false )
end


# ------------------------------------------------------------
# Show token documentation:

if Opt['doc'].given

    Token::TOKEN_TYPES.each do |k,v|
        doc = Token.new( "<re>", k, "<tag>" )
        puts "Token name:     #{k.to_s}"
        puts "  C define:     #{v[:token].call(doc)}"
        puts "  Class:        #{v[:desc]}"
        puts "  Info:         #{v[:info]}"
        puts
    end

    exit( false )
end




# ------------------------------------------------------------
# RuiFlex run:

# Add EOF token

load Opt['file'].value


basename = File.basename( Opt['file'].value, '.rb' )

lex_file = "#{basename}.l"
header_file = "#{basename}.h"
c_file = "#{basename}.c"


# ------------------------------------------------------------
# Create lex file:

fh = File.open( lex_file, 'w' )

fh.puts "/* Flex file generated by ruiflex: #{Time.now.to_s} */"

fh.puts "%option yylineno" if FlexOpt.get( :lineno )
fh.puts "%option reentrant" if FlexOpt.get( :reentrant )
FlexOpt.get( :flexopt ).each do |opt|
    fh.puts "%option #{opt}"
end
fh.puts "" if FlexOpt::Opts.values.index( true )
fh.puts "D    [0-9]"
fh.puts "B    [0-1]"
fh.puts "L    [a-zA-Z_]"
fh.puts "H    [a-fA-F0-9]"
fh.puts "E    [Ee][+-]?{D}+"
fh.puts "FS   (f|F|l|L)"
fh.puts "IS   (u|U|l|L)*"
fh.puts ""
fh.puts "%{"
fh.puts "#include \"#{header_file}\""
fh.puts FlexOpt.get( :l_header ) if FlexOpt.get( :l_header )
fh.puts "%}"
fh.puts ""
fh.puts "%%"

Token.tokens.each do |t|
    t.display( fh )
end

fh.puts "%%"
fh.puts ""
if FlexOpt.get( :reentrant )
    fh.puts "int yywrap( yyscan_t yyscanner ) { return( 1 ); }"
else
    fh.puts "int yywrap() { return( 1 ); }"
end
fh.puts ""


# Token description types.
fh.puts "static char* ruiflex_token_desc_data[] = {"

Token::TOKEN_TYPES.each do |k,v|
    fh.puts "  \"#{v[:desc]}\","
end
fh.puts "};"
fh.puts

fh.write "static int ruiflex_token_desc_table[] = { "
fh.write Token.tokens.collect{|i| i.ididx.to_s}.join( ", " )
fh.write " };\n"
fh.puts

fh.puts "static char* ruiflex_token_id_data[] = {"
Token.tokens.each do |t|
    fh.puts "  \"#{t.idstr}\","
end
fh.puts "};"
fh.puts

# Function that returns Token description based on ID number.
fh.puts "char* ruiflex_token_desc( int id ) {"
fh.puts "  return ruiflex_token_desc_data["
fh.puts "    ruiflex_token_desc_table[ id - RUIFLEX_FIRST_TOKEN_NO ] ];"
fh.puts "}"
fh.puts ""
fh.puts "char* ruiflex_token_id( int id ) {"
fh.puts "  return ruiflex_token_id_data[ id - RUIFLEX_FIRST_TOKEN_NO ];"
fh.puts "}"
fh.puts FlexOpt.get( :l_footer ) if FlexOpt.get( :l_footer )

fh.close


# ------------------------------------------------------------
# Create C-header file:

fh = File.open( header_file, 'w' )
fh.puts "/* Flex header file generated by ruiflex: #{Time.now.to_s} */"
fh.puts "#ifndef #{basename.upcase}_H"
fh.puts "#define #{basename.upcase}_H"
fh.puts ""
fh.puts FlexOpt.get( :h_header ) if FlexOpt.get( :h_header )
fh.puts "/* Flex interface. */"
if FlexOpt.get( :reentrant )
    fh.puts "typedef void* yyscan_t;"
    fh.puts "int yylex_init( yyscan_t* ptr_yy_globals );"
    fh.puts "int yylex ( yyscan_t yyscanner );"
    fh.puts "int yylex_destroy( yyscan_t yyscanner );"
    fh.puts "char* yyget_text( yyscan_t scanner );"
    fh.puts "void yyset_in( FILE* in_str, yyscan_t scanner );"
    fh.puts "int yyget_lineno( yyscan_t scanner );"
else
    fh.puts "extern FILE* yyin;"
    fh.puts "extern int yylineno;"
    fh.puts "extern char* yytext;"
    fh.puts "int yylex(void);"
end
fh.puts ""
fh.puts ""
fh.puts "/* Generic token defines. */"
fh.puts format( "#define %-26s 0", "TOK_EOF" )
fh.puts ""
fh.puts "/* Generated token defines. */"

fh.puts format( "#define %-26s #{Token::ID_START}", "RUIFLEX_FIRST_TOKEN_NO" )

Token.token_ids.each do |k,v|
    fh.puts format( "#define %-26s #{v[0]}", k )
end

fh.puts ""
fh.puts "char* ruiflex_token_desc( int id );"
fh.puts "char* ruiflex_token_id( int id );"
fh.puts FlexOpt.get( :h_footer ) if FlexOpt.get( :h_footer )
fh.puts ""
fh.puts "#endif"
fh.close

if Opt['transform'].given
    system( "flex -o #{c_file} #{lex_file}" )
end
